# Generated by Django 2.1 on 2018-08-19 06:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APISettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=False, help_text='Designates whether this group is enabled for API.', verbose_name='enabled')),
                ('token', models.CharField(max_length=48, unique=True, verbose_name='Token')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='api_settings', to='auth.Group', verbose_name='group')),
            ],
            options={
                'verbose_name': 'api settings',
                'verbose_name_plural': 'api settings',
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environments_data', models.TextField(default='{}')),
                ('components_data', models.TextField(default='{}')),
                ('configs_data', models.TextField(default='{}')),
                ('data_file', models.FileField(blank=True, null=True, upload_to='backups')),
                ('comment', models.CharField(blank=True, max_length=255, null=True, verbose_name='comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation datetime')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'backup',
                'verbose_name_plural': 'backups',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('alias', models.SlugField(help_text='Unique component alias', unique=True)),
                ('settings_json', models.TextField(blank=True, default='{}', null=True)),
                ('schema_json', models.TextField(blank=True, default='{}', null=True)),
                ('is_global', models.BooleanField(default=False, help_text='Use only base environment')),
                ('require_schema', models.BooleanField(default=True, help_text='Use json schema validation')),
                ('strict_keys', models.BooleanField(default=False, help_text='Deny to change keys schema')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this component should be treated as active. Unselect this instead of deleting components.', verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation datetime')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modification datetime')),
            ],
            options={
                'verbose_name': 'component',
                'verbose_name_plural': 'components',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environment', models.SlugField(verbose_name='environment alias')),
                ('component', models.SlugField(verbose_name='component alias')),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'config',
                'verbose_name_plural': 'configs',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('alias', models.SlugField(unique=True, verbose_name='alias')),
                ('order', models.SmallIntegerField(default=0, verbose_name='order')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this environment should be treated as active. Unselect this instead of deleting environments.', verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation datetime')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modification datetime')),
                ('fallback', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='environments', to='configfactory.Environment', verbose_name='fallback environment')),
            ],
            options={
                'verbose_name': 'environment',
                'verbose_name_plural': 'environments',
                'ordering': ('order', 'name'),
            },
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255, verbose_name='action')),
                ('action_type', models.CharField(blank=True, choices=[('create', 'create'), ('update', 'update'), ('delete', 'delete')], db_index=True, max_length=128, null=True, verbose_name='action type')),
                ('object_id', models.IntegerField(blank=True, null=True, verbose_name='object id')),
                ('object_repr', models.CharField(blank=True, max_length=128, null=True, verbose_name='object repr')),
                ('old_data_json', models.TextField(blank=True, null=True, verbose_name='old data')),
                ('new_data_json', models.TextField(blank=True, null=True, verbose_name='new data')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='action time')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.ContentType', verbose_name='content type')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='config',
            unique_together={('environment', 'component')},
        ),
    ]
